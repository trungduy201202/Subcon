import streamlit as st
import plotly.express as px
import pandas as pd
import plotly.graph_objects as go

# Danh s√°ch c√°c lo·∫°i s·∫£n xu·∫•t v·ªõi file CSV chung
production_type_files = {
    "Upper": "data/upper.csv",
    "Bottom": "data/bottom.csv",
    "Outsourcing": "data/outsourcing.csv"
}

# Sidebar - B·ªô l·ªçc
st.sidebar.header("üîç Filter Options")

# Ch·ªçn lo·∫°i s·∫£n xu·∫•t
selected_category = st.sidebar.selectbox("üõ† Select Production Type", ["Select a Category"] + list(production_type_files.keys()), index=0, key="category")

if selected_category == "Select a Category":
    st.warning("Please select a production type to view data.")
    st.stop()

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV chung c·ªßa Production Type
file_path = production_type_files[selected_category]

try:
    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
    df_csv = pd.read_csv(file_path, encoding="utf-8")

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    df_csv.fillna(0, inplace=True)
    df_csv.columns = df_csv.columns.str.strip()

    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu s·ªë
    numeric_columns = ["YEAR", "WEEK", "MONTH", "RANDOM INSPECTION QTY", "REJECT QTY"]
    for col in numeric_columns:
        df_csv[col] = pd.to_numeric(df_csv[col], errors='coerce').fillna(0).astype(int)

    # X√°c ƒë·ªãnh c·ªôt defect (b·ªè qua c√°c c·ªôt th√¥ng tin chung)
    exclude_columns = ["SUBCON", "YEAR", "WEEK", "MONTH", "DATE", "MODEL", "PGSC", "PO",
                       "INPUT QTY", "RANDOM INSPECTION QTY", "PASS QTY", "REJECT QTY", "% REJECT", "RESULT", "REMARK"]
    defect_columns = [col for col in df_csv.columns if col not in exclude_columns]


    # X√°c ƒë·ªãnh danh s√°ch SUBCON t·ª´ d·ªØ li·ªáu
    subcon_list = sorted(df_csv["SUBCON"].unique())
    selected_subcon = st.sidebar.selectbox("üè≠ Select Subcon", ["All"] + subcon_list, index=0, key="subcon")

    # N·∫øu ch∆∞a ch·ªçn Subcon th√¨ d·ª´ng ch∆∞∆°ng tr√¨nh
    if selected_subcon == "All":
        st.warning("Please select a Subcon to continue.")
        st.stop()

    # B·ªô l·ªçc NƒÉm
    year_options = sorted(df_csv["YEAR"].unique())
    selected_year = st.sidebar.selectbox("üìÖ Select Year", ["All"] + [str(y) for y in year_options], key="year")
    
    # N·∫øu ch∆∞a ch·ªçn Year th√¨ d·ª´ng ch∆∞∆°ng tr√¨nh
    if selected_year == "All":
        st.warning("Please select a Year to continue.")
        st.stop()


    # B·ªô l·ªçc Tu·∫ßn
    week_options = sorted(df_csv["WEEK"].unique())
    selected_week = st.sidebar.selectbox("üìÖ Select Week", ["All"] + [str(w) for w in week_options], key="week")

    # L·ªçc d·ªØ li·ªáu theo c√°c b·ªô l·ªçc ƒë√£ ch·ªçn
    df_filtered = df_csv.copy()

    if selected_subcon != "All":
        df_filtered = df_filtered[df_filtered["SUBCON"] == selected_subcon]

    if selected_year != "All":
        df_filtered = df_filtered[df_filtered["YEAR"] == int(selected_year)]

    if selected_week != "All":
        df_filtered = df_filtered[df_filtered["WEEK"] == int(selected_week)]

    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    st.markdown(f"<h1 style='text-align: center;'>üìå {selected_category} - Subcon Tracking</h1>", unsafe_allow_html=True)

    # --- 1Ô∏è‚É£ Monthly Defect Trend ---
    st.subheader("1Ô∏è‚É£ Monthly Defect Trend")

    # L·ªçc d·ªØ li·ªáu theo Production Type, Subcon v√† Year
    df_filtered = df_csv[df_csv["YEAR"] == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_filtered = df_filtered[df_filtered["SUBCON"] == selected_subcon]

    # T√≠nh t·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra & reject theo th√°ng
    df_monthly = df_filtered.groupby("MONTH").agg({
        "REJECT QTY": "sum",
        "RANDOM INSPECTION QTY": "sum"
    }).reset_index()

    # T√≠nh t·ª∑ l·ªá l·ªói (REJECT QTY / RANDOM INSPECTION QTY) * 100
    df_monthly["Defect Rate (%)"] = (df_monthly["REJECT QTY"] / df_monthly["RANDOM INSPECTION QTY"]) * 100

    # X·ª≠ l√Ω l·ªói chia cho 0 (n·∫øu RANDOM INSPECTION QTY = 0, g√°n 0%)
    df_monthly["Defect Rate (%)"] = df_monthly["Defect Rate (%)"].fillna(0)

    # L√†m tr√≤n s·ªë li·ªáu v√† chuy·ªÉn th√†nh d·∫°ng chu·ªói c√≥ k√Ω hi·ªáu `%`
    df_monthly["Defect Rate (%)"] = df_monthly["Defect Rate (%)"].round(2)  # L√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n
    df_monthly["Defect Rate Text"] = df_monthly["Defect Rate (%)"].astype(str) + "%"  # Th√™m k√Ω hi·ªáu %

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_monthly = px.bar(
        df_monthly, 
        x="MONTH", 
        y="Defect Rate (%)", 
        text="Defect Rate Text",  # Hi·ªÉn th·ªã ph·∫ßn trƒÉm tr·ª±c ti·∫øp tr√™n c·ªôt
        color_discrete_sequence=["#1f77b4"],  # M√†u c·ªë ƒë·ªãnh cho t·∫•t c·∫£ c√°c c·ªôt
        title=f"Monthly Defect Rate ({selected_subcon})"
    )

    # C·∫≠p nh·∫≠t tr·ª•c y ƒë·ªÉ hi·ªÉn th·ªã %
    fig_monthly.update_yaxes(title_text="Defect Rate (%)")

    # Ch·ªânh hover tooltip
    fig_monthly.update_traces(
        hovertemplate="<b>Month: %{x}</b><br>Defect Rate: %{y:.2f}%<extra></extra>"
    )

    fig_monthly.update_xaxes(
        title_text="MONTH",
        tickmode="linear",  # Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c gi√° tr·ªã s·ªë
        tickvals=list(range(1, 13)),  # ƒê·∫£m b·∫£o hi·ªán t·ª´ th√°ng 1 ƒë·∫øn th√°ng 12
        tickformat="d",  # ƒê·ªãnh d·∫°ng s·ªë nguy√™n
        tickangle=0  # Gi·ªØ th·∫≥ng h√†ng d·ªÖ ƒë·ªçc
    )

    st.plotly_chart(fig_monthly, use_container_width=True)

    # --- 2Ô∏è‚É£ Weekly Defect Trend ---
    st.subheader("2Ô∏è‚É£ Weekly Defect Trend")

    # L·ªçc d·ªØ li·ªáu theo Production Type, Subcon, v√† Year
    df_filtered = df_csv[df_csv["YEAR"] == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_filtered = df_filtered[df_filtered["SUBCON"] == selected_subcon]

    # T√≠nh t·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra & reject theo tu·∫ßn
    df_weekly = df_filtered.groupby("WEEK").agg({
        "REJECT QTY": "sum",
        "RANDOM INSPECTION QTY": "sum"
    }).reset_index()

    # T√≠nh to√°n Defect Rate (%) cho t·ª´ng tu·∫ßn
    df_weekly["Defect Rate (%)"] = (df_weekly["REJECT QTY"] / df_weekly["RANDOM INSPECTION QTY"]) * 100
    df_weekly["Defect Rate (%)"] = df_weekly["Defect Rate (%)"].fillna(0).round(2)
    df_weekly["Defect Rate Text"] = df_weekly["Defect Rate (%)"].astype(str) + "%"

    # N·∫øu ch·ªçn "All" tu·∫ßn ‚Üí v·∫Ω Line Chart
    if selected_week == "All":
        fig_weekly = px.line(
            df_weekly, x="WEEK", y="Defect Rate (%)",
            markers=True, title=f"Weekly Defect Trend ({selected_subcon})"
        )
        fig_weekly.update_traces(
            hovertemplate="<b>Week: %{x}</b><br>Defect Rate: %{y:.2f}%<extra></extra>"
        )
    else:
        # L·ªçc d·ªØ li·ªáu ch·ªâ cho tu·∫ßn ƒë√£ ch·ªçn
        df_week_selected = df_weekly[df_weekly["WEEK"] == int(selected_week)]

        # V·∫Ω Bar Chart cho tu·∫ßn ƒë∆∞·ª£c ch·ªçn
        fig_weekly = px.bar(
            df_week_selected, x="WEEK", y="Defect Rate (%)",
            text="Defect Rate Text", 
            title=f"Defect Rate for Week {selected_week} ({selected_subcon})"
        )

        # **Ch·ªâ hi·ªÉn th·ªã ƒë√∫ng s·ªë tu·∫ßn ƒë√£ ch·ªçn**
        fig_weekly.update_xaxes(
            tickmode="array",
            tickvals=[int(selected_week)],  # Ch·ªâ hi·ªÉn th·ªã ƒë√∫ng tu·∫ßn ƒë√£ ch·ªçn
            ticktext=[f"{selected_week}"]
        )

        fig_weekly.update_traces(
            hovertemplate="<b>Week: %{x}</b><br>Defect Rate: %{y:.2f}%<extra></extra>"
        )

    # C·∫≠p nh·∫≠t tr·ª•c y hi·ªÉn th·ªã %
    fig_weekly.update_yaxes(title_text="Defect Rate (%)")

    st.plotly_chart(fig_weekly, use_container_width=True)

    # --- 3Ô∏è‚É£ Bi·ªÉu ƒë·ªì Top 3 Model c√≥ defect cao nh·∫•t ---
    st.subheader("3Ô∏è‚É£ Top 3 Defective Models")

    # L·ªçc d·ªØ li·ªáu theo Production Type, Subcon, v√† Year
    df_top_models = df_csv[df_csv["YEAR"] == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_top_models = df_top_models[df_top_models["SUBCON"] == selected_subcon]

    # N·∫øu ch·ªçn tu·∫ßn c·ª• th·ªÉ, l·ªçc theo tu·∫ßn
    if selected_week != "All":
        df_top_models = df_top_models[df_top_models["WEEK"] == int(selected_week)]

    # T√≠nh t·ª∑ l·ªá defect cho t·ª´ng model
    df_top_models = df_top_models.groupby("MODEL").agg({
        "REJECT QTY": "sum",
        "RANDOM INSPECTION QTY": "sum"
    }).reset_index()

    # T√≠nh to√°n defect rate (%)
    df_top_models["Defect Rate (%)"] = (df_top_models["REJECT QTY"] / df_top_models["RANDOM INSPECTION QTY"]) * 100
    df_top_models["Defect Rate (%)"] = df_top_models["Defect Rate (%)"].fillna(0).round(2)
    df_top_models["Defect Rate Text"] = df_top_models["Defect Rate (%)"].astype(str) + "%"

    # Ch·ªçn Top 3 Model c√≥ defect rate cao nh·∫•t
    df_top_models = df_top_models.sort_values("Defect Rate (%)", ascending=False).head(3)

    # Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu hay kh√¥ng
    if df_top_models.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu defect cho Model trong b·ªô l·ªçc n√†y.")
    else:
        # V·∫Ω bi·ªÉu ƒë·ªì
        fig_models = px.bar(
            df_top_models, 
            x="MODEL", 
            y="Defect Rate (%)", 
            text="Defect Rate Text", 
            color="MODEL",
            title=f"Top 3 Models with Highest Defect Rate ({selected_subcon} - {'Week ' + selected_week if selected_week != 'All' else 'All Weeks'})"
        )

        # C·∫≠p nh·∫≠t tr·ª•c y ƒë·ªÉ hi·ªÉn th·ªã %
        fig_models.update_yaxes(title_text="Defect Rate (%)")

        # Ch·ªânh hover tooltip
        fig_models.update_traces(
            hovertemplate="<b>Model: %{x}</b><br>Defect Rate: %{y:.2f}%<extra></extra>"
        )

        st.plotly_chart(fig_models, use_container_width=True)


    # --- 4Ô∏è‚É£ Bi·ªÉu ƒë·ªì Pareto Chart - Defect Analysis ---
    st.subheader("4Ô∏è‚É£ Pareto Chart - Defect Analysis")

    # L·ªçc d·ªØ li·ªáu theo Year
    df_defect = df_csv[df_csv["YEAR"] == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_defect = df_defect[df_defect["SUBCON"] == selected_subcon]

    # N·∫øu ch·ªçn tu·∫ßn c·ª• th·ªÉ, l·ªçc theo tu·∫ßn
    if selected_week != "All":
        df_defect = df_defect[df_defect["WEEK"] == int(selected_week)]

    # T·ªïng h·ª£p s·ªë l∆∞·ª£ng c·ªßa t·ª´ng defect type
    df_defect_types = df_defect[defect_columns].sum().reset_index()
    df_defect_types.columns = ["Defect Type", "Defect Count"]

    # ƒê·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu s·ªë
    df_defect_types["Defect Count"] = pd.to_numeric(df_defect_types["Defect Count"], errors='coerce').fillna(0).astype(int)

    # S·∫Øp x·∫øp l·ªói theo s·ªë l∆∞·ª£ng t·ª´ cao ƒë·∫øn th·∫•p
    df_defect_types = df_defect_types[df_defect_types["Defect Count"] > 0].sort_values("Defect Count", ascending=False)

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ defect n√†o
    if df_defect_types.empty:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu defect n√†o cho b·ªô l·ªçc n√†y.")
    else:
        # ƒê·∫£m b·∫£o c·ªôt "Defect Type" l√† chu·ªói
        df_defect_types["Defect Type"] = df_defect_types["Defect Type"].astype(str)

        # T√≠nh to√°n t·ª∑ l·ªá l≈©y k·∫ø (Cumulative %)
        df_defect_types["Cumulative %"] = df_defect_types["Defect Count"].cumsum() / float(df_defect_types["Defect Count"].sum()) * 100

        # V·∫Ω bi·ªÉu ƒë·ªì Pareto
        fig_pareto = go.Figure()

        # C·ªôt Defect Count (tr·ª•c y b√™n tr√°i)
        fig_pareto.add_trace(go.Bar(
            x=df_defect_types["Defect Type"], 
            y=df_defect_types["Defect Count"], 
            name="Defect Count",
            marker=dict(color="royalblue"),
            hovertemplate="<b>Defect Type: %{x}</b><br>Defect Count: %{y}<extra></extra>"
        ))

        # ƒê∆∞·ªùng Cumulative % (tr·ª•c y b√™n ph·∫£i)
        fig_pareto.add_trace(go.Scatter(
            x=df_defect_types["Defect Type"], 
            y=df_defect_types["Cumulative %"],
            mode="lines+markers",
            name="Cumulative Percentage",
            yaxis="y2",
            hovertemplate="<b>Defect Type: %{x}</b><br>Cumulative %: %{y:.2f}%<extra></extra>"
        ))

        # C·∫•u h√¨nh tr·ª•c
        fig_pareto.update_layout(
            title=f"Pareto Chart - Defect Types ({selected_subcon} - {'Week ' + selected_week if selected_week != 'All' else 'All Weeks'})",
            xaxis=dict(title="Defect Type"),
            yaxis=dict(title="Defect Count", side="left"),
            yaxis2=dict(
                title="Cumulative Percentage (%)",
                overlaying="y",
                side="right",
                showgrid=False
            ),
            legend=dict(x=1.1, y=1),
        )

        st.plotly_chart(fig_pareto, use_container_width=True)


    # --- 5Ô∏è‚É£ Bi·ªÉu ƒë·ªì Pie Chart - Defect Distribution by Defect Type ---
    st.subheader("5Ô∏è‚É£ Defect Distribution by Defect Type")

    # L·ªçc d·ªØ li·ªáu theo nƒÉm
    df_defect = df_csv[df_csv["YEAR"] == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_defect = df_defect[df_defect["SUBCON"] == selected_subcon]

    # N·∫øu ch·ªçn tu·∫ßn c·ª• th·ªÉ, l·ªçc theo tu·∫ßn
    if selected_week != "All":
        df_defect = df_defect[df_defect["WEEK"] == int(selected_week)]

    # T·ªïng h·ª£p s·ªë l∆∞·ª£ng c·ªßa t·ª´ng defect type
    df_defect_types = df_defect[defect_columns].sum().reset_index()
    df_defect_types.columns = ["Defect Type", "Defect Count"]

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ defect n√†o
    if df_defect_types["Defect Count"].sum() == 0:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu defect n√†o cho b·ªô l·ªçc n√†y.")
    else:
        # T√≠nh t·ªïng s·ªë l∆∞·ª£ng l·ªói
        total_defects = df_defect_types["Defect Count"].sum()

        # T√≠nh t·ª∑ l·ªá % l·ªói
        df_defect_types["Defect Percentage"] = (df_defect_types["Defect Count"] / total_defects) * 100

        # X·ª≠ l√Ω l·ªói chia cho 0 (n·∫øu kh√¥ng c√≥ l·ªói n√†o, ƒë·∫∑t gi√° tr·ªã 0)
        df_defect_types["Defect Percentage"] = df_defect_types["Defect Percentage"].fillna(0)

        # Lo·∫°i b·ªè c√°c l·ªói c√≥ t·ª∑ l·ªá 0%
        df_defect_types = df_defect_types[df_defect_types["Defect Percentage"] > 0]

        # L√†m tr√≤n s·ªë li·ªáu
        df_defect_types["Defect Percentage"] = df_defect_types["Defect Percentage"].round(2)

        # V·∫Ω bi·ªÉu ƒë·ªì Pie Chart
        fig_pie = px.pie(
            df_defect_types, 
            names="Defect Type", 
            values="Defect Percentage",
            title=f"Defect Distribution for Subcon: {selected_subcon}",
            hole=0.3,  # T·∫°o d·∫°ng Doughnut Chart
        )

        # C·∫≠p nh·∫≠t tooltip
        fig_pie.update_traces(
            hovertemplate="<b>Defect Type: %{label}</b><br>Defect Count: %{value:.2f}%<extra></extra>"
        )

        st.plotly_chart(fig_pie, use_container_width=True)

    # --- 6Ô∏è‚É£ Bi·ªÉu ƒë·ªì Heatmap Defect Distribution by Model ---
    st.subheader("6Ô∏è‚É£ Defect Distribution Heatmap by Model")

    # L·ªçc d·ªØ li·ªáu theo nƒÉm
    df_heatmap = df_csv[df_csv["YEAR"].astype(int) == int(selected_year)]

    # N·∫øu subcon kh√¥ng ph·∫£i "All", l·ªçc theo subcon c·ª• th·ªÉ
    if selected_subcon != "All":
        df_heatmap = df_heatmap[df_heatmap["SUBCON"] == selected_subcon]

    # N·∫øu ch·ªçn tu·∫ßn c·ª• th·ªÉ, l·ªçc theo tu·∫ßn
    if selected_week != "All":
        df_heatmap = df_heatmap[df_heatmap["WEEK"].astype(int) == int(selected_week)]

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if df_heatmap.empty or len(defect_columns) == 0:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu defect n√†o cho b·ªô l·ªçc n√†y.")
    else:
        # Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c c·ªôt defect v·ªÅ d·∫°ng s·ªë
        df_heatmap[defect_columns] = df_heatmap[defect_columns].apply(pd.to_numeric, errors="coerce").fillna(0)

        # ƒê·∫£m b·∫£o MODEL lu√¥n l√† chu·ªói
        df_heatmap["MODEL"] = df_heatmap["MODEL"].astype(str)

        # T·ªïng s·ªë l·ªói c·ªßa t·ª´ng Model theo lo·∫°i l·ªói
        df_defect_counts = df_heatmap.groupby("MODEL")[defect_columns].sum().reset_index()

        # T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm c·ªßa t·ª´ng Model
        df_total_inspection = df_heatmap.groupby("MODEL")["RANDOM INSPECTION QTY"].sum().reset_index()

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ d·∫°ng s·ªë ƒë·ªÉ tr√°nh l·ªói chia cho chu·ªói
        df_total_inspection["RANDOM INSPECTION QTY"] = df_total_inspection["RANDOM INSPECTION QTY"].astype(float)

        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang d·∫°ng c·ªôt ƒë·ªÉ v·∫Ω heatmap
        df_heatmap_melted = df_defect_counts.melt(id_vars=["MODEL"], var_name="Defect Type", value_name="Defect Count")

        # **üõ†Ô∏è Kh·∫Øc ph·ª•c l·ªói `MODEL` ƒë√£ t·ªìn t·∫°i khi `merge`**
        df_total_inspection = df_total_inspection.rename(columns={"MODEL": "MODEL_TEMP"})  # ƒê·ªïi t√™n c·ªôt t·∫°m th·ªùi
        df_heatmap_melted = df_heatmap_melted.merge(df_total_inspection, left_on="MODEL", right_on="MODEL_TEMP", how="left")
        df_heatmap_melted.drop(columns=["MODEL_TEMP"], inplace=True)  # X√≥a c·ªôt t·∫°m

        # Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c gi√° tr·ªã sang s·ªë
        df_heatmap_melted["Defect Count"] = df_heatmap_melted["Defect Count"].astype(float)
        df_heatmap_melted["RANDOM INSPECTION QTY"] = df_heatmap_melted["RANDOM INSPECTION QTY"].astype(float)

        # Ki·ªÉm tra n·∫øu RANDOM INSPECTION QTY = 0 th√¨ ƒë·∫∑t t·ª∑ l·ªá l·ªói = 0
        df_heatmap_melted["Defect Rate (%)"] = df_heatmap_melted.apply(
            lambda row: (row["Defect Count"] / row["RANDOM INSPECTION QTY"]) * 100 if row["RANDOM INSPECTION QTY"] > 0 else 0,
            axis=1
        ).round(2)

        # Lo·∫°i b·ªè c√°c l·ªói c√≥ gi√° tr·ªã 0 ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã tr√™n heatmap
        df_heatmap_melted = df_heatmap_melted[df_heatmap_melted["Defect Rate (%)"] > 0]

        if df_heatmap_melted.empty:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªß l·ªõn ƒë·ªÉ hi·ªÉn th·ªã heatmap.")
        else:
            # V·∫Ω Heatmap v·ªõi m√†u ƒë·ªè cam, ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc r·ªông h∆°n
            fig_heatmap = px.imshow(
                df_heatmap_melted.pivot(index="Defect Type", columns="MODEL", values="Defect Rate (%)"),
                labels=dict(x="Model", y="Defect Type", color="Defect Rate (%)"),
                title=f"Defect Distribution Heatmap by Model ({selected_subcon})",
                color_continuous_scale="Oranges",
                width=1400,  # TƒÉng chi·ªÅu r·ªông
                height=900   # TƒÉng chi·ªÅu cao
            )

            # C·∫≠p nh·∫≠t tooltip ƒë·ªÉ hi·ªÉn th·ªã ch√≠nh x√°c s·ªë li·ªáu
            fig_heatmap.update_traces(
                hovertemplate="<b>Model: %{x}</b><br>Defect Type: %{y}<br>Defect Rate: %{z:.2f}%<extra></extra>"
            )

            # ƒêi·ªÅu ch·ªânh font ch·ªØ ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n
            fig_heatmap.update_layout(
                xaxis=dict(tickangle=45, title_font=dict(size=14), tickfont=dict(size=12)),  # Xoay label model, tƒÉng font
                yaxis=dict(title_font=dict(size=14), tickfont=dict(size=12)),  # TƒÉng font c·ªßa defect type
                margin=dict(l=100, r=100, t=80, b=100)  # Gi·ªØ kho·∫£ng c√°ch ƒë·ªÉ kh√¥ng b·ªã c·∫Øt
            )

            st.plotly_chart(fig_heatmap, use_container_width=False)  # T·∫Øt "use_container_width" ƒë·ªÉ gi·ªØ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh

except FileNotFoundError:
    st.error(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa {selected_subcon}!")
except Exception as e:
    st.error(f"‚ö†Ô∏è L·ªói h·ªá th·ªëng! {e}")
